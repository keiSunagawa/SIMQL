define {
  defun f(num1: Number) => Number {
    let x = 3
    let num2 = $add($num1, 1)
    let num3 = $add($num2, 1)
    $dbg($num3)
  }
  defun sub_type_test(n: Number) => Expr {
    $n
  }
  defun concat(str1: String, str2: String) => Expr {
    let res = q{ 3 }
    let res2 = $add($res, $res)
    q{ $res2 == 5 }
  }
  defun if_test(in: Boolean) => String {
    $if($in, "aa", "bb")
  }
  defun list_test(in: Number) => List<Number> {
    let y = nil<Number>
    let x = $cons($in, $cons(3, $y))
    $x
  }
  defun bind_three(in: Number => Number) => Number {
    $in(3)
  }
  defun af_test(x: Number) => Number {
    let x = (in2: Number) => Number {
      $add($x, $in2)
    }
    $bind_three($dbg($x))
  }
  defun map_test(x: Number) => List<Number> {
    let n = nil<Number>
    let xs = $cons(2, $cons(3, $cons($x, $n)))
    let f2 = (acm: List<Number>, x: Number) => List<Number> {
      let xx = $add($x, 1)
      $cons($xx, $acm)
    }
    let init = nil<Number>
    $fold($xs, $init, $f2)
  }
  defun generics_test(x: Symbol) => Symbol {
    let n = nil<Symbol>
    let xs = $cons(a, $cons(b, $cons(c, $n)))
    let xs = $identity($reverse($xs))
    let f = (s: Symbol, next: Symbol) => Symbol {
      $csm($s, $next)
    }
    let xs = $fold($xs, z, $f)
    $csm($xs, $x)
  }
  defun dup_generics_test<T>(x: T) => T {
    let f = <X>(y: X) => T {
      $x
    }
    let f2 = <X>(y: X) => T {
      $x
    }
    $f2($x)
  }
}
