define {
  defun f(num1: Number) => Number {
    let x = 3
    let num2 = $add($num1, 1)
    let num3 = $add($num2, 1)
    $dbg($num3)
  }
  defun sub_type_test(n: Number) => Expr {
    $n
  }
  defun concat(str1: String, str2: String) => Expr {
    let res = q{ 3 }
    let res2 = $add($res, $res)
    q{ $res2 == 5 }
  }
  defun if_test(in: Boolean) => String {
    $if($in, "aa", "bb")
  }
  defun list_test(in: Number) => List<Number> {
    let y = nil<Number>
    let x = $cons(5, $cons(3, $y))
    $x
  }
  defun bind_three(in: Number => Number) => Number {
    $in(3)
  }
  defun af_test(y: Number) => Number {
    let x = (in2: Number) => Number {
      $add($y, $in2)
    }
    $bind_three($dbg($x))
  }
}
