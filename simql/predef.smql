define {
  defun is_null(lhs: Expr) => Expr {
    q{ $`? IS NULL`($lhs) }
  }
  defun is_not_null(lhs: Expr) => Expr {
    q{ $`? IS NOT NULL`($lhs) }
  }
  defun table_access(col: Symbol, index: Number) => Symbol {
    let tbl = $get_table($index)
    let accessor = $csm($tbl, $single_dot)
    $csm($accessor, $col)
  }
  defun c(col: Expr) => Raw {
    q{ $`COUNT(?)`($col) }
  }
  defun like(col: Symbol, keyword: String) => Expr {
    let lk = $cst($keyword, "%")
    let lk = $cst("%", $lk)
    q{ $`? LIKE(?)`($col, $keyword) }
  }
  defun identity<A>(a: A) => A {
    $a
  }
  defun reverse<E>(xs: List<E>) => List<E> {
    let id = (xs2: List<E>, next: E) => List<E> {
      $cons($next, $xs2)
    }
    let init = nil<E>
    $fold($xs, $init, $id)
  }
}
